
#include <iostream>
using namespace std;
#include <robot_instr.h>
#include <robot_link.h>
#include <stdlib.h>     //for using the function sleep
#include <stdio.h>
#include <time.h>
#include <unistd.h>
#include <stopwatch.h>
#include <robot_delay.h>
#include <cmath>

#define ROBOT_NUM 14   // The id number (see below)
#define middle 0
#define left 1
#define front 2
#define right 3

long long convertDecimalToBinary(int);

int val,a;                                  // data from microprocessor

bool IR[4];
// data from IR sensors
robot_link rlink;                          // datatype for the robot link


int main () {
<<<<<<< HEAD
	int IR_data;						        			// data from IR sensors
	int middle = 0, left = 1, front = 2, right = 3;
    bool IR_middle, IR_left, IR_front, IR_right;
	robot_link rlink;      					    			// datatype for the robot link
      
	if (!rlink.initialise (ROBOT_NUM)) { 					// setup the link
		cout << "Cannot initialise link" << endl;
		rlink.print_errs("  ");
		return -1;
	}
	rlink.command(MOTOR_1_GO, 100);							// robot starts moving
	rlink.command(MOTOR_2_GO, 228);
=======

    
if (!rlink.initialise (ROBOT_NUM)) { 	// setup the link
  cout << "Cannot initialise link" << endl;
  rlink.print_errs("  ");
  return -1;
}
    
	
//rlink.command(MOTOR_1_GO, 100);		// robot starts moving
//rlink.command(MOTOR_2_GO, 228);
>>>>>>> refs/remotes/origin/master
	
    IR_data = rlink.request(READ_PORT_0);	    			// read value from IR board
    cout << IR_data << endl;								// Debugging comment

<<<<<<< HEAD
    IR_middle   = (IR_data & ( 1 << middle )) >> middle;	// Finding which IR sensors have a value of 1, which is white
    IR_left     = (IR_data & ( 1 << left )) >> left;
    IR_right    = (IR_data & ( 1 << right )) >> right;
    IR_front    = (IR_data & ( 1 << front )) >> front;
    
    cout << "Middle: " << IR_middle << endl;				// Debugging comment
    cout << "Left: " << IR_left << endl;					// Debugging comment
    cout << "Right: " << IR_right << endl;					// Debugging comment
    cout << "Front: " << IR_front << endl;					// Debugging comment
=======
    for (int k = 0, k < 4, k++) {
        IR[k] = (a & ( 1 << k )) >> k;
        cout << IR[k] << endl;
    
    cout << "Middle: " << IR[middle] << endl;
    cout << "Left: " << IR[left] << endl;
    cout << "Right: " << IR[right] << endl;
    cout << "Front: " << IR[front] << endl;
>>>>>>> refs/remotes/origin/master

	rlink.command (RAMP_TIME, 255);							// default ramp time

}



